---
title: "Managing Python Environments"
subtitle: "Why it's important and why to do it"
format:
  revealjs:
    theme: default
    slide-number: true
    chalkboard: 
      buttons: false
    preview-links: auto
    css: styles.css
    footer: 'Python Environment Guide'
---

## Why Use Python Environments?

-   ***Dependency Isolation***: Different projects often require different package versions

-   ***Reproducibility***: Ensures code works the same way across different operating systems

-   ***Conflict Prevention***: Avoids "dependency hell" where package requirements clash

## Important Terms

| Tool      | Description                                                                                                                        |
|-------------------------------|----------------------------------------|
| **Pip**   | \- Python package manager<br>- Simpler dependency solver<br>- Uses `requirements.txt` for dependencies                             |
| **Conda** | \- Package **and** environment manager<br>- *Complex* dependency solver (= fewer conflicts)<br>- Uses YAML-based environment files |
| **Mamba** | \- She's Conda, but better and faster                                                                                              |

## Other terms you might hear

-   **Miniconda** = lightweight version of conda that avoids installing the full Anaconda distribution

-   **Micromamba** = lightweight version of mamba that's useful for testing in containers

## Best practices

1.  Avoid installing additional packages into your Base environment.

2.  Every python project should have it's own environment.

3.  Environments should only contain the packages you need.

4.  Keep track of all of your packages in an text or yml file and include it in your github repositories.

## Setup

-   Install [Anaconda](https://ucsb-meds.github.io/MEDS-installation-guide/#install-Anaconda)

-   Note: when prompted in the installation process, you should add conda to your system path so that it will recognize conda as a command. If you miss this step, you can still do it. Just ask your preferred GenAI how to add conda to your system path.

## Let's create the mamba-env you'll use to install other environments

First, we'll create a conda environment from scratch that just contains mamba. You'll use this environment to install your other conda environments.

``` python
# Create environment and install 
conda create -n mamba-env

# List all conda environments and locations to confirm it was created
conda env list

# Activate your environment 
conda activate mamba-env

# Install mamba
conda install mamba -c conda-forge

# Deactivate your environment when you don't need it
conda deactivate
```

## Create environments from an environment.yml file

Example yml file here.

``` python
# Activate your mamba-env used for installing environments
conda activate mamba-env

# Navigate to the directory with the .yml file
cd /path/to/yml

# mamba 
```

## Create environments from scratch 

``` python
# Import
conda create 

# Install whatever packages you need (ex: numpy and xarray)
mamba install numpy xarray

# You can also install specific versions if needed
mamba install pandas=1.3.3
```
